<%@ val configuration: io.phdata.pipewrench.configuration.Configuration %>
<%@ val table: io.phdata.pipewrench.configuration.TableDefinition %>
<%@ val typeMapping: io.phdata.pipewrench.configuration.TypeMapping%>
set sync_ddl=1;
USE `${configuration.hadoop.stagingDatabase.name}`;
CREATE TABLE IF NOT EXISTS `${configuration.hadoop.stagingDatabase.name}`.`part_${table.destinationName}` (
<%
    val columnDefinitions = table.columns.map {
        column =>
            val mappedDataType = io.phdata.pipewrench.util.TemplateFunction.mapDataType(column, typeMapping, "PARQUET")
            val dataType = if (mappedDataType.equalsIgnoreCase("decimal")) {
                s"DECIMAL(${column.precision.get}, ${column.scale.get})"
            } else {
                mappedDataType
            }
            s"`${column.destinationName}` $dataType COMMENT '${column.comment.getOrElse("")}'"
    }.mkString(",\n")
%>
${columnDefinitions}
)
PARTITIONED BY (ingest_partition int)
COMMENT '${table.comment.getOrElse("")}'
STORED AS PARQUET
LOCATION '${configuration.hadoop.stagingDatabase.path}/part_${table.destinationName}'
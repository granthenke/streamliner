#import(io.phdata.streamliner.schemadefiner.model.Snowflake)
<%@ val configurationDiff: io.phdata.streamliner.schemadefiner.model.ConfigurationDiff %>
<%@ val tableDiff: io.phdata.streamliner.schemadefiner.model.TableDiff %>
<%@ val templateContext: io.phdata.streamliner.schemadefiner.model.TemplateContext %>
<%@ val typeMapping: Map[String, Map[String, String]]%>
#{
    val destination = configurationDiff.currentDestination.asInstanceOf[Snowflake]
}#

#if (tableDiff.existsInDestination && tableDiff.existsInSource)
    #if (tableDiff.allChangesAreCompatible(typeMapping))
        #if (tableDiff.isColumnAdded())
            ALTER TABLE ${destination.stagingDatabase.name}.${destination.stagingDatabase.schema}.${tableDiff.destinationName} ADD COLUMN ${unescape(tableDiff.columnDDL(typeMapping))};
        #end
        #if (tableDiff.isColumnModified(typeMapping))
            ALTER TABLE ${destination.stagingDatabase.name}.${destination.stagingDatabase.schema}.${tableDiff.destinationName} ALTER (${unescape(tableDiff.alterColumnDDL(typeMapping))});
        #end
        
    #elseif (!tableDiff.allChangesAreCompatible(typeMapping))
        <%
            templateContext.addError(s"Incompatible change in table ${destination.stagingDatabase.name}.${destination.stagingDatabase.schema}.${tableDiff.destinationName} which will be ignored. Template: create-table-evolve-schema.ssp")
        %>
    #end
#elseif (tableDiff.existsInSource && !tableDiff.existsInDestination)
    CREATE TABLE IF NOT EXISTS ${destination.stagingDatabase.name}.${destination.stagingDatabase.schema}.${tableDiff.destinationName} (
    ${unescape(tableDiff.createTableColumnDDL(typeMapping))}
    );
#end

<%--
Copyright 2018 phData Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--%>
#import(io.phdata.streamliner.configuration.Snowflake)
<%@ val configuration: io.phdata.streamliner.configuration.Configuration %>
<%@ val table: io.phdata.streamliner.configuration.SnowflakeTable %>
#{
    val destination = configuration.destination.asInstanceOf[Snowflake]
}#
CREATE TASK IF NOT EXISTS ${destination.stagingDatabase.name}.${destination.stagingDatabase.schema}.${table.destinationName}_task
    WAREHOUSE = ${destination.warehouse}
    SCHEDULE = '${destination.taskSchedule.getOrElse("5 minutes")}'
    WHEN SYSTEM$STREAM_HAS_DATA('${table.destinationName}_stg_stream')
    AS
    MERGE INTO ${destination.reportingDatabase.name}.${destination.reportingDatabase.schema}.${table.destinationName} t
        USING ( SELECT ${table.columnList(aAOpt = Some("si"))}, si.header_change_oper
                FROM ${destination.stagingDatabase.name}.${destination.stagingDatabase.schema}.${table.destinationName}_stg_stream si
                    INNER JOIN ( SELECT ${table.primaryKeyList}, MAX(header_timestamp) max_header_timestamp
                                 FROM ${destination.stagingDatabase.name}.${destination.stagingDatabase.schema}.${table.destinationName}_stg_stream
                                 GROUP BY ${table.primaryKeyList} ) i
                    ON ${table.pkCondition(aA = Some("i"), bA = Some("si"), " AND ")} AND i.max_header_timestamp = si.header_timestamp ) s
    ON ${table.pkCondition(aA = Some("t"), bA = Some("s"), " AND ")}
    WHEN MATCHED AND s.header_change_oper = 'U' THEN UPDATE SET ${table.columnCondition(bA = Some("s"), joiner = ", ")}
    WHEN MATCHED AND s.header_change_oper = 'D' THEN DELETE
    WHEN NOT MATCHED AND s.header_change_oper != 'D' OR s.header_change_oper IS NULL THEN INSERT (${table.columnList}) VALUES (${table.columnList(aAOpt = Some("s"))});
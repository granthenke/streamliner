<%--
Copyright 2018 phData Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--%>
#import(io.phdata.streamliner.schemadefiner.model.Snowflake)
#import(io.phdata.streamliner.schemadefiner.model.Jdbc)
<%@ val configuration: io.phdata.streamliner.schemadefiner.model.Configuration %>
<%@ val table: io.phdata.streamliner.schemadefiner.model.SnowflakeTable %>
<%@ val tableDiff: io.phdata.streamliner.schemadefiner.model.TableDiff %>
<%@ val typeMapping: Map[String, Map[String, String]]%>
<%@ val templateContext: io.phdata.streamliner.schemadefiner.model.TemplateContext %>
<%@ val currConfigFile: String%>
<%@ val prevStateDir: String%>
#{
    val destination = configuration.destination.asInstanceOf[Snowflake]
    val source = configuration.source.asInstanceOf[Jdbc]
    val validSchemaChanges = source.getValidSchemaChanges
}#
snowsql-cmd=${destination.snowSqlCommand} -f

currTableStateFile=${currConfigFile}
previousStateDirectory=${prevStateDir}

copy-into: copy-into.sql
    $(snowsql-cmd) copy-into.sql

create-schema: create-schema.sql
    $(snowsql-cmd) create-schema.sql

create-snowpipe: create-snowpipe.sql
    $(snowsql-cmd) create-snowpipe.sql

create-stage: create-stage.sql
    $(snowsql-cmd) create-stage.sql

create-table: create-table.sql
    $(snowsql-cmd) create-table.sql

drop-schema: drop-schema.sql
    $(snowsql-cmd) drop-schema.sql

drop-snowpipe: drop-snowpipe.sql
    $(snowsql-cmd) drop-snowpipe.sql

drop-stage: drop-stage.sql
    $(snowsql-cmd) drop-stage.sql

drop-table: drop-table.sql
    $(snowsql-cmd) drop-table.sql

alter-table-evolve-schema: alter-table-evolve-schema.sql
    $(snowsql-cmd) alter-table-evolve-schema.sql

alter-snowpipe: alter-snowpipe.sql
    $(snowsql-cmd) alter-snowpipe.sql

incompatible-change: incompatible-change.sql
    $(snowsql-cmd) incompatible-change.sql

first-run:
    $(MAKE) create-schema
    $(MAKE) create-stage
    $(MAKE) create-table
    $(MAKE) copy-into
    $(MAKE) create-snowpipe
	mv $(currTableStateFile) $(previousStateDirectory)

drop:
    $(MAKE) drop-table
    $(MAKE) drop-snowpipe

evolve-schema:
#if (tableDiff.existsInDestination && tableDiff.existsInSource)
    #if (!tableDiff.allChangesAreCompatible(typeMapping, validSchemaChanges))
        $(MAKE) incompatible-change
        <%
            templateContext.addError(s"Incompatible change in table ${destination.stagingDatabase.name}.${destination.stagingDatabase.schema}.${tableDiff.destinationName}. User should resolve this incompatible change manually as per the documentation. Template: snowflake-snowpipe-append/Makefile.ssp")
        %>

    #elseif (tableDiff.allChangesAreCompatible(typeMapping, validSchemaChanges))
	$(MAKE) alter-table-evolve-schema
        $(MAKE) alter-snowpipe
        mv $(currTableStateFile) $(previousStateDirectory)

    #end
#elseif (tableDiff.existsInSource && !tableDiff.existsInDestination)
    #if (tableDiff.allChangesAreCompatible(typeMapping, validSchemaChanges))
        $(MAKE) first-run
    #elseif (!tableDiff.allChangesAreCompatible(typeMapping, validSchemaChanges))
        $(MAKE) incompatible-change
        <%
            templateContext.addError(s"Incompatible change in table ${destination.stagingDatabase.name}.${destination.stagingDatabase.schema}.${tableDiff.destinationName}. User should resolve this incompatible change manually as per the documentation. Template: snowflake-snowpipe-append/Makefile.ssp")
        %>
    #end

#end
